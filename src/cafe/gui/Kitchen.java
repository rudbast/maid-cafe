/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cafe.gui;

import cafe.tool.MsgBox;
import cafe.tool.MyDb;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Rudy
 */
public class Kitchen extends javax.swing.JFrame {
    /**
     * Creates new form Kitchen
     */
    public Kitchen() {
        initComponents();

        refreshList();
        // set timer for autorefresh tables from database
        myTimer = new javax.swing.Timer(5000, new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent e) {
                refreshList();
            }
        });
        myTimer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spMenuQ = new javax.swing.JScrollPane();
        tabMenuQ = new javax.swing.JTable();
        btnEditRecipe = new javax.swing.JButton();
        btnProgress = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        menuKitchen = new javax.swing.JMenuBar();
        menuAction = new javax.swing.JMenu();
        miLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Order List");

        tabMenuQ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabMenuQ.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spMenuQ.setViewportView(tabMenuQ);

        btnEditRecipe.setText("Edit Recipe");
        btnEditRecipe.setActionCommand("Add");
        btnEditRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditRecipeActionPerformed(evt);
            }
        });

        btnProgress.setBackground(new java.awt.Color(204, 204, 0));
        btnProgress.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnProgress.setText("Make");
        btnProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgressActionPerformed(evt);
            }
        });

        btnDone.setBackground(new java.awt.Color(0, 204, 0));
        btnDone.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(0, 204, 204));
        btnRefresh.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        menuAction.setText("Action");

        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        menuAction.add(miLogout);

        menuKitchen.add(menuAction);

        setJMenuBar(menuKitchen);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spMenuQ, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                        .addGap(56, 56, 56)
                        .addComponent(btnDone, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                        .addGap(52, 52, 52)
                        .addComponent(btnEditRecipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnRefresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spMenuQ, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDone)
                    .addComponent(btnProgress)
                    .addComponent(btnEditRecipe))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Custom
    private Recipe redit = new Recipe();
    private javax.swing.Timer myTimer;

    private void btnEditRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditRecipeActionPerformed
        // show recipe edit form
        if(!redit.isVisible()){
            redit = new Recipe();
            redit.setVisible(true);
        }
    }//GEN-LAST:event_btnEditRecipeActionPerformed

    private void btnProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgressActionPerformed
        // update order status to 'IN PROGRESS' if item needed to cook is enough else update status to 'Canceled'
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        int oid, qty, mid;
        ArrayList<Integer> itemid = new ArrayList<Integer>();
        ArrayList<Integer> reqs = new ArrayList<Integer>();

        // get order id from selected row
        oid = Integer.parseInt(tabMenuQ.getModel().getValueAt(tabMenuQ.getSelectedRow(), 0).toString());
        // get menu id from selected row through join
        mid = Integer.parseInt(MyDb.GetField("SELECT m.id FROM `Menu` m JOIN `Order_List` o ON m.id=o.menu_id WHERE o.order_no=" + oid));
        // get order quantity from tabMenuQ
        qty = Integer.parseInt(tabMenuQ.getValueAt(tabMenuQ.getSelectedRow(), 2).toString());

        String status = MyDb.GetField("SELECT `Status` FROM `Order_List` WHERE `Order_No`=" + oid);
        if(status.equals("CANCELED")){
            MsgBox.info("Selected menu has been canceled.");
            refreshList();
            return;
        }

        // get list of item id with it's requirement from Recipe
        Connection conn = null;
        Statement stm = null;
        ResultSet rs = null;

        try {
            // connection/statement/resultset declaration
            conn = DriverManager.getConnection(MyDb.url);
            stm = conn.createStatement();
            rs = stm.executeQuery("SELECT `Item_Id`, `Requirement` FROM `Recipe` WHERE `Menu_Id`=" + mid);
            // read query result
            while(rs.next()){
                itemid.add(rs.getInt(1));
                reqs.add(rs.getInt(2));
            }
        }
        catch (SQLException e){
            MsgBox.info(e.toString());
        }
        finally {
            try {
                // close existing connection/statement/resultset
                rs.close();
                stm.close();
                conn.close();
            } catch (SQLException e) {
                MsgBox.info(e.toString());
            }
        }

        //check every requirement availability from Inventory
        boolean check = true;
        int avb, i=0;
        for(i=0; i<itemid.size(); ++i){
            // get unit availability from inventory according to item id
            avb = Integer.parseInt(MyDb.GetField("SELECT `Unit` FROM `Inventory` WHERE `Id`=" + itemid.get(i)));
            // cancel order if unit availability is less than order quantity times item requirement
            if(avb < reqs.get(i) * qty){
                check = false;
                break;
            }
        }

        if(!check){
            // show insufficient item message
            MsgBox.info("Insufficient item : " + MyDb.GetField("SELECT `Name` FROM `Inventory` WHERE `Id`=" + itemid.get(i)) + "\n" +
                    "Menu : " + MyDb.GetField("SELECT `Name` FROM `Menu` WHERE `Id`=" + mid) + "\n" +
                    "Ordered menu is canceled, please restock inventory." + "\n" +
                    "Waiter No. " + MyDb.GetField("SELECT `Staff_Id` FROM `Order_List` WHERE `Order_No`=" + oid) +
                    ", please ask confirmation from table " + MyDb.GetField("SELECT `Table_No` FROM `Order_List` WHERE `Order_No`=" + oid) + " for new order.",
                    "Attention");
            // update order status into 'CANCELED'
            MyDb.ExecNonQuery("UPDATE `Order_List` SET `Status`='CANCELED' WHERE `Order_No`=" + oid);
            // remove canceled order from Kitchen
            MyDb.ExecNonQuery("DELETE FROM `Kitchen` WHERE `Order_No`=" + oid);
            refreshList();
            this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
            return;
        }

        // update inventory item
        for(i=0; i<itemid.size(); ++i){
            // get initial unit amount
            avb = Integer.parseInt(MyDb.GetField("SELECT `Unit` FROM `Inventory` WHERE `Id`=" + itemid.get(i)));
            // update inventory item
            MyDb.ExecNonQuery("UPDATE `Inventory` SET `Unit`=" + (avb - (reqs.get(i) * qty)) + " WHERE `Id`=" + itemid.get(i));
        }
        // set order status into 'IN PROCESS'
        MyDb.ExecNonQuery("UPDATE `Order_List` SET `Status`='IN PROCESS' WHERE `Order_No`=" + oid);
        refreshList();
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnProgressActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        // update order status to 'Done' and remove item from kitchen
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        int oid, mid;
        String tid;

        // get order id from selected row
        oid = Integer.parseInt(tabMenuQ.getModel().getValueAt(tabMenuQ.getSelectedRow(), 0).toString());
        // delete current selected row's order from kitchen's queue list
        MyDb.ExecNonQuery("DELETE FROM `Kitchen` WHERE `Order_No`=" + oid);
        // get menu id from selected row
        mid = Integer.parseInt(MyDb.GetField("SELECT `Menu_Id` FROM `Order_List` WHERE `Order_No`=" + oid));
        // get table no from selected row
        tid = MyDb.GetField("SELECT `Table_No` FROM `Order_List` WHERE `Order_No`=" + oid);

        int oldId = -1;
        try {
            // check menu order similarity
            oldId = Integer.parseInt(MyDb.GetField("SELECT `Order_No` FROM `Order_List` WHERE `Menu_Id`=" + mid + " AND `Status`='DONE' AND `Table_No`='" + tid + "'"));
        } catch (Exception e){ oldId =  -1; }

        int amt = 0, initAmt = 0;
        // update quantity if exist same menu on same table
        if(oldId != -1){
            // get initial quantity of the same menu
            initAmt = Integer.parseInt(MyDb.GetField("SELECT `Quantity` FROM `Order_List` WHERE `Order_No`=" + oldId));
            // get new quantity of the same menu
            amt = Integer.parseInt(MyDb.GetField("SELECT `Quantity` FROM `Order_List` WHERE `Order_No`=" + oid));
//                MsgBox.info("" + initAmt + " " + amt);
            // update new quantity to old menu
            MyDb.ExecNonQuery("UPDATE `Order_List` SET `Quantity`=" + (initAmt + amt) + " WHERE `Order_No`=" + oldId);
            // delete the new entry
            MyDb.ExecNonQuery("DELETE FROM `Order_List` WHERE `Order_No`=" + oid);
        }
        else {
            // update status to 'DONE' no same menu exist on same table
            MyDb.ExecNonQuery("UPDATE `Order_List` SET `Status`='DONE' WHERE `Order_No`=" + oid);
        }
        refreshList();
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // refresh table data
        refreshList();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        // logout and close form
        this.setVisible(false);
        new Login().setVisible(true);
    }//GEN-LAST:event_miLogoutActionPerformed

    private void refreshList() {
        // refresh table
        int idx = -1;
        if(tabMenuQ.getRowCount() > 0)
            idx = tabMenuQ.getSelectedRow();

        tabMenuQ = MyDb.setTable("SELECT k.order_no 'No.', m.name 'Name', o.table_no 'Table No.', o.Quantity, o.Status " +
                "FROM `Kitchen` k JOIN `Order_List` o " +
                "ON k.order_no=o.order_no " +
                "JOIN `Menu` m ON m.id=o.menu_id " +
                "WHERE o.status LIKE 'QUEUING' OR o.status LIKE 'IN PROCESS'" +
                "ORDER BY k.priority");
        tabMenuQ.removeColumn(tabMenuQ.getColumnModel().getColumn(0));
        spMenuQ.setViewportView(tabMenuQ);

        btnProgress.setEnabled(false);
        btnDone.setEnabled(false);

        // set selection change event for table tabMenuQ
        tabMenuQ.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent ev) {
                if (ev.getValueIsAdjusting())
                    return;
                // enable/disable buttons according to status of selected row
                String status = tabMenuQ.getValueAt(tabMenuQ.getSelectedRow(), 3).toString();
                if(status.equals("IN PROCESS")){
                    btnProgress.setEnabled(false);
                    btnDone.setEnabled(true);
                }
                else {
                    btnProgress.setEnabled(true);
                    btnDone.setEnabled(false);
                }
            }
        });

        if(idx != -1)
            if(tabMenuQ.getRowCount() > idx)
                tabMenuQ.setRowSelectionInterval(idx, idx);
        if(tabMenuQ.getRowCount() > 0)
            tabMenuQ.setRowSelectionInterval(0, 0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kitchen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kitchen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kitchen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kitchen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Kitchen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnEditRecipe;
    private javax.swing.JButton btnProgress;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JMenu menuAction;
    private javax.swing.JMenuBar menuKitchen;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JScrollPane spMenuQ;
    private javax.swing.JTable tabMenuQ;
    // End of variables declaration//GEN-END:variables
}
