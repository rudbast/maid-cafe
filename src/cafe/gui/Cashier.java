/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cafe.gui;

import cafe.tool.Combo;
import cafe.tool.MsgBox;
import cafe.tool.MyDb;

/**
 *
 * @author Jehoshaphat
 */
public class Cashier extends javax.swing.JFrame {
    /**
     * Creates new form Cashier
     */
    public Cashier() {
        initComponents();
        resetComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paymentBtnGroup = new javax.swing.ButtonGroup();
        labPayment = new javax.swing.JLabel();
        rbCash = new javax.swing.JRadioButton();
        rbCredit = new javax.swing.JRadioButton();
        labCreditCard = new javax.swing.JLabel();
        labTableNo = new javax.swing.JLabel();
        java.util.Vector creditModel = cafe.tool.MyDb.FillCombo("SELECT `Id`, `Name` FROM `Discount` WHERE `Category`='CREDIT' ORDER BY `Name`");
        cbCreditCard = new javax.swing.JComboBox(creditModel);
        java.util.Vector tableModel = cafe.tool.MyDb.FillCombo("SELECT `Table_No`, `Table_No` FROM `Order_List` GROUP BY `Table_No`");
        cbTableNo = new javax.swing.JComboBox(tableModel);
        spOrder = new javax.swing.JScrollPane();
        tabOrder = new javax.swing.JTable();
        labSubTotal = new javax.swing.JLabel();
        labTax = new javax.swing.JLabel();
        labService = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        labTOTAL = new javax.swing.JLabel();
        labTotalToPay = new javax.swing.JLabel();
        labPaid = new javax.swing.JLabel();
        labChange = new javax.swing.JLabel();
        tfTotalToPay = new javax.swing.JFormattedTextField();
        tfChange = new javax.swing.JFormattedTextField();
        btnSubmit = new javax.swing.JButton();
        tfSubTotal = new javax.swing.JFormattedTextField();
        tfTax = new javax.swing.JFormattedTextField();
        tfService = new javax.swing.JFormattedTextField();
        discDetailGroup = new javax.swing.JPanel();
        spDiscounts = new javax.swing.JScrollPane();
        tabDiscounts = new javax.swing.JTable();
        java.util.Vector eventModel = cafe.tool.MyDb.FillCombo("SELECT `Id`, `Name` FROM `Discount` WHERE `Category`='EVENT' ORDER BY `Name`");
        cbEvent = new javax.swing.JComboBox(eventModel);
        labEvent = new javax.swing.JLabel();
        tfPaid = new javax.swing.JTextField();
        btnSplitBills = new javax.swing.JButton();
        menuCashier = new javax.swing.JMenuBar();
        menuAction = new javax.swing.JMenu();
        miLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cashier");

        labPayment.setText("Payment Type");

        paymentBtnGroup.add(rbCash);
        rbCash.setSelected(true);
        rbCash.setText("Cash");
        rbCash.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbCashItemStateChanged(evt);
            }
        });

        paymentBtnGroup.add(rbCredit);
        rbCredit.setText("Credit");
        rbCredit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbCreditItemStateChanged(evt);
            }
        });

        labCreditCard.setText("Credit Card");

        labTableNo.setText("Table No.");

        /*
        cbCreditCard.setModel(null);
        */
        cbCreditCard.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCreditCardItemStateChanged(evt);
            }
        });

        cbTableNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTableNoItemStateChanged(evt);
            }
        });

        tabOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spOrder.setViewportView(tabOrder);

        labSubTotal.setText("Sub Total  :");

        labTax.setText("Tax (10 %)  :");

        labService.setText("Service (10 %) :");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labTOTAL.setFont(new java.awt.Font("DejaVu Sans", 1, 48)); // NOI18N
        labTOTAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labTOTAL.setText("TOTAL");

        labTotalToPay.setText("Total to pay after Discount  :");

        labPaid.setText("Paid  :");

        labChange.setText("Change  :");

        tfTotalToPay.setEditable(false);
        tfTotalToPay.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("RP ,##0"))));
        tfTotalToPay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfTotalToPay.setText("0");

        tfChange.setEditable(false);
        tfChange.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("RP ,##0"))));
        tfChange.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfChange.setText("0");

        btnSubmit.setBackground(new java.awt.Color(0, 204, 0));
        btnSubmit.setFont(new java.awt.Font("DejaVu Sans", 1, 36)); // NOI18N
        btnSubmit.setText("Cal");
        btnSubmit.setToolTipText("");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        tfSubTotal.setEditable(false);
        tfSubTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("RP ,##0"))));
        tfSubTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfSubTotal.setText("0");

        tfTax.setEditable(false);
        tfTax.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("RP ,##0"))));
        tfTax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfTax.setText("0");

        tfService.setEditable(false);
        tfService.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("RP ,##0"))));
        tfService.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfService.setText("0");

        discDetailGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Discount Details"));
        discDetailGroup.setOpaque(false);

        tabDiscounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabDiscounts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spDiscounts.setViewportView(tabDiscounts);

        javax.swing.GroupLayout discDetailGroupLayout = new javax.swing.GroupLayout(discDetailGroup);
        discDetailGroup.setLayout(discDetailGroupLayout);
        discDetailGroupLayout.setHorizontalGroup(
            discDetailGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spDiscounts, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        discDetailGroupLayout.setVerticalGroup(
            discDetailGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spDiscounts, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
        );

        /*
        */
        cbEvent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbEventItemStateChanged(evt);
            }
        });

        labEvent.setText("Event");

        tfPaid.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfPaid.setText("0");

        btnSplitBills.setText("Split Bill");
        btnSplitBills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSplitBillsActionPerformed(evt);
            }
        });

        menuAction.setText("Action");

        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        menuAction.add(miLogout);

        menuCashier.add(menuAction);

        setJMenuBar(menuCashier);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(labPayment)
                                            .addGap(23, 23, 23)
                                            .addComponent(rbCash)
                                            .addGap(54, 54, 54))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(labCreditCard)
                                            .addGap(40, 40, 40)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(cbCreditCard, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cbTableNo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGap(30, 30, 30)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labTableNo)
                                        .addGap(179, 179, 179)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rbCredit)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labEvent)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbEvent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(btnSplitBills, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(labSubTotal)
                                .addGap(18, 18, 18)
                                .addComponent(tfSubTotal))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(labTax)
                                .addGap(18, 18, 18)
                                .addComponent(tfTax))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labService)
                                .addGap(18, 18, 18)
                                .addComponent(tfService)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jSeparator2)
                        .addGap(2, 2, 2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(labTOTAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(labChange)
                                            .addComponent(labPaid)
                                            .addComponent(labTotalToPay))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfChange, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                            .addComponent(tfPaid)
                                            .addComponent(tfTotalToPay))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(discDetailGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(8, 8, 8)))))
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(labTOTAL, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(labPayment))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rbCash)
                                .addComponent(rbCredit)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbCreditCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbEvent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labEvent))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(labCreditCard)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(labTableNo))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbTableNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSplitBills))))
                        .addGap(8, 8, 8)
                        .addComponent(spOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labSubTotal))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labTax))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labService)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(discDetailGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labTotalToPay)
                                    .addComponent(tfTotalToPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labPaid))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labChange))))))
                .addGap(8, 8, 8))
        );

        setSize(new java.awt.Dimension(821, 454));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rbCashItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbCashItemStateChanged
        // radio button cash check state
        if(rbCash.isSelected()){
            cbCreditCard.setEnabled(false);
            tfPaid.setEditable(true);
            tfPaid.setText("0");
        }
        refreshList();
    }//GEN-LAST:event_rbCashItemStateChanged

    private void rbCreditItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbCreditItemStateChanged
        // radio button credit check state
        if(rbCredit.isSelected()){
            cbCreditCard.setEnabled(true);
            tfPaid.setEditable(false);
        }
        refreshList();
    }//GEN-LAST:event_rbCreditItemStateChanged

    private void cbTableNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTableNoItemStateChanged
        // update menu list according to selected table no.
        refreshList();
    }//GEN-LAST:event_cbTableNoItemStateChanged

    private void cbCreditCardItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCreditCardItemStateChanged
        // combobox credit card check state
        refreshList();
    }//GEN-LAST:event_cbCreditCardItemStateChanged

    private void cbEventItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbEventItemStateChanged
        // combobox event check state
        refreshList();
    }//GEN-LAST:event_cbEventItemStateChanged

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // check paid and set change
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        if((int) tfTotalToPay.getValue() == 0){
            this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
            return;
        }
        // get result of paid - total to pay
        int total =  Integer.parseInt(tfPaid.getText()) - (int) tfTotalToPay.getValue();
        if(total < 0){
            // if total to pay is lower than zero, show error message
            MsgBox.info("Amount paid is not enough. Please recheck input.", "Insufficient Amount Paid");
            tfChange.setValue(0);
            this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
            return;
        }
        // set change value
        tfChange.setValue(total);

        // set receipt no as maximum value plus one from sales
        int receiptNo = 0;
        try {
            receiptNo = Integer.parseInt(MyDb.GetField("SELECT MAX(`Receipt_No`) FROM `Sales`"));
        } catch (Exception e) { }
        ++receiptNo;

        // move paid item to `Sales` from `Order_List`
        String query = "INSERT INTO `Sales` (`Receipt_No`, `Menu_Id`, `Price`, `Quantity`, `Table_No`, `Staff_Id`, `Sales_Date`";
        // query string logic
        if(rbCredit.isSelected())
            if(cbCreditCard.getSelectedIndex() > 0) query += ", `CC_Disc_Id`, `CC_Disc_Percent`";
        if(cbEvent.getSelectedIndex() > 0) query += ", `Event_Disc_Id`, `Event_Disc_Percent`";
        query += ", `Total`) VALUES ";

        String query2 = "";
        for(int i=0; i<tabOrder.getRowCount(); ++i){
            query2 += "\n";
            if(i > 0) query2 += ", ";
            String mid, prc, qty, tabid, sid;
            // set values needed for insertion
            if(!isSplit){
                mid = tabOrder.getModel().getValueAt(i, 1).toString();  // menu id
                prc = tabOrder.getModel().getValueAt(i, 2).toString();  // price
                qty = tabOrder.getValueAt(i, 1).toString();             // quantity
                tabid = cbTableNo.getSelectedItem().toString();         // table no
                sid = tabOrder.getModel().getValueAt(i, 3).toString();  // staff id
            }
            else {
                mid = tabOrder.getModel().getValueAt(i, 0).toString();
                prc = MyDb.GetField("SELECT `Price` FROM `Menu` WHERE `Id`=" + mid);
                qty = tabOrder.getValueAt(i, 1).toString();
                tabid = cbTableNo.getSelectedItem().toString();
                sid = MyDb.GetField("SELECT DISTINCT(`Staff_Id`) FROM `Order_List` WHERE `Table_No`='" + tabid + "'");
            }
            // total value with tax + service addition and discounts reduction
            total = Integer.parseInt(prc) * Integer.parseInt(qty);
            total += ((total * 10 / 100) * 2);
            for(int j=0; j<tabDiscounts.getRowCount(); ++j)
                total -= (total * Integer.parseInt(tabDiscounts.getValueAt(j, 1).toString()) / 100);
            // get today's date
            java.sql.Date now = new java.sql.Date(new java.util.Date().getTime());
            query2 += "(" + receiptNo + "," + mid + "," + prc + "," + qty + ",'" + tabid + "'," + sid + ",'" + now + "'";
            for(int j=0; j<tabDiscounts.getRowCount(); ++j){
                // add discount values
                String did = tabDiscounts.getModel().getValueAt(j, 0).toString();
                String perc = tabDiscounts.getValueAt(j, 1).toString();
                query2 += ", " + did + ", " + perc;
            }
            query2 += "," + total + ")";
        }
//        MsgBox.info(query + query2);
//        return;
        MyDb.ExecNonQuery(query + query2);

        if(!isSplit){
            // remove all item (item paid) from Order_List for current table
            String tabid = cbTableNo.getSelectedItem().toString();
            MyDb.ExecNonQuery("DELETE FROM `Order_List` WHERE `Table_No`='" + tabid + "'");
            MsgBox.info("Transaction success.\nClick OK to show receipt.");
        }
        else {
            // update/remove paid item from Order_List
            for(int i=0; i<tabOrder.getRowCount(); ++i){
                // get values needed for checking
                String mid = tabOrder.getModel().getValueAt(i, 0).toString();       // menu id
                String tabid = cbTableNo.getSelectedItem().toString();              // table no
                int qty = Integer.parseInt(tabOrder.getValueAt(i, 1).toString());   // quantity
                // initial quantity from db
                int initQty = Integer.parseInt(MyDb.GetField("SELECT `Quantity` FROM `Order_List` WHERE `Menu_Id`=" + mid + " AND `Table_No`='" + tabid + "'"));
                // execute delete/update according to quantity left
                if(initQty - qty == 0){
                    // delete current item row from Order_List
                    MyDb.ExecNonQuery("DELETE FROM `Order_List` WHERE `Menu_Id`=" + mid + " AND `Table_No`='" + tabid + "'");
                }
                else {
                    // update current item row quantity
                    MyDb.ExecNonQuery("UPDATE `Order_List` SET `Quantity`=" + (initQty - qty) + " WHERE `Menu_Id`=" + mid + " AND `Table_No`='" + tabid + "'");
                }
            }
            // check whether current table no still exists (exists means more payment needed to be done)
            int count = 0;
            try {
                count = Integer.parseInt(MyDb.GetField("SELECT COUNT(`Table_No`) FROM `Order_List` WHERE `Table_No`='" + cbTableNo.getSelectedItem().toString() + "' GROUP BY `Table_No`"));
            } catch(Exception e) {}
            if(count > 0){
                MsgBox.info("Please continue with the rest of the payment.\nClick OK to show receipt.");
                btnSplitBills.setEnabled(true);
                cbTableNo.setEnabled(true);
            }
            else MsgBox.info("Transaction success.\nClick OK to show receipt.");
            isSplit = false;
        }
        // create receipt and show receipt information
        MyDb.createReceipt(receiptNo, (int) tfTotalToPay.getValue(), Integer.parseInt(tfPaid.getText()));
        // reset table combobox value from db and refresh all component
        cbTableNo.setModel(new javax.swing.JComboBox(MyDb.FillCombo("SELECT `Table_No`, `Table_No` FROM `Order_List` GROUP BY `Table_No`")).getModel());
        resetComponents();
        refreshList();
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnSubmitActionPerformed

    private SplitBill sbill;

    private void btnSplitBillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSplitBillsActionPerformed
        // show split bills form
        if(cbTableNo.getSelectedIndex() > 0){
            sbill = new SplitBill(cbTableNo.getSelectedItem().toString(), this);
            sbill.setVisible(true);
        }
    }//GEN-LAST:event_btnSplitBillsActionPerformed

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        // close form and show login
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_miLogoutActionPerformed

    private boolean isSplit = false;

    public void doneAndCheck(javax.swing.table.DefaultTableModel newModel) {
        this.isSplit = true;
        // disable some buttons to avoid errors
        btnSplitBills.setEnabled(false);
        cbTableNo.setEnabled(false);

        // set new table item list
        tabOrder = new javax.swing.JTable(newModel);
        tabOrder.removeColumn(tabOrder.getColumnModel().getColumn(0));
        spOrder.setViewportView(tabOrder);

        refreshList();
    }

    private void refreshList() {
        // refresh table data
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        String query;

        // shows discount table details
        query = "SELECT `Id`, `Description`, `Percentage` FROM `Discount`";
        if(rbCredit.isSelected() || cbEvent.getSelectedIndex() > 0)
            query += " WHERE ";
        else query += " WHERE `Id`=-1";

        if(rbCredit.isSelected()){
            Combo credit = (Combo) cbCreditCard.getSelectedItem();
            query += "`Id`=" + credit.getValue();
            if(cbEvent.getSelectedIndex() > 0) query += " OR ";
        }

        if(cbEvent.getSelectedIndex() > 0){
            Combo credit = (Combo) cbEvent.getSelectedItem();
            query += "`Id`=" + credit.getValue();
        }

//        MsgBox.info(query);
        tabDiscounts = MyDb.setTable(query);
        tabDiscounts.removeColumn(tabDiscounts.getColumnModel().getColumn(0));
        tabDiscounts.getColumnModel().getColumn(0).setPreferredWidth(300);
        tabDiscounts.setRowSelectionAllowed(false);
        spDiscounts.setViewportView(tabDiscounts);
//        tabDiscounts.setOpaque(false);
//        ((javax.swing.table.DefaultTableCellRenderer)tabDiscounts.getDefaultRenderer(Object.class)).setOpaque(false);
//        spDiscounts.getViewport().setOpaque(false);

        // check split status, true means dont refresh table using query included in this condition
        if(!isSplit){
            // remove row and reset values if none is selected on table no
            if(cbTableNo.getSelectedItem().toString().equals("None")){
                java.awt.EventQueue.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        while(tabOrder.getRowCount() > 0)
                            ((javax.swing.table.DefaultTableModel) tabOrder.getModel()).removeRow(0);
                    }
                });

                tfSubTotal.setValue(0);
                tfTax.setValue(0);
                tfService.setValue(0);
                tfTotalToPay.setValue(0);
                tfChange.setValue(0);
                tfPaid.setText("0");
                this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
                return;
            }
            query = "SELECT o.order_no, m.id, m.price, o.staff_id, m.name 'Menu Name', SUM(o.quantity) 'Qty', (m.price * SUM(o.quantity)) 'Price Sub Total'" +
                    "FROM `Order_List` o JOIN `Menu` m " +
                    "ON o.menu_id=m.id " +
                    "WHERE o.table_no='" + cbTableNo.getSelectedItem().toString() + "'" +
                    " AND o.status='DONE'" +
                    " GROUP BY m.name" +
                    " ORDER BY m.name";
            tabOrder = MyDb.setTable(query);
            // hide some column from view
            tabOrder.removeColumn(tabOrder.getColumnModel().getColumn(0));
            tabOrder.removeColumn(tabOrder.getColumnModel().getColumn(0));
            tabOrder.removeColumn(tabOrder.getColumnModel().getColumn(0));
            tabOrder.removeColumn(tabOrder.getColumnModel().getColumn(0));
            tabOrder.setRowSelectionAllowed(false);
            spOrder.setViewportView(tabOrder);
//            spOrder.setOpaque(false);
//            tabOrder.setOpaque(false);
//            ((javax.swing.table.DefaultTableCellRenderer)tabOrder.getDefaultRenderer(Object.class)).setOpaque(false);
//            spOrder.getViewport().setOpaque(false);
        }

        // tax and service calculation
        // formula : price subtotal + (10% tax + 10% service) from price subtotal - (credit card discount + even
        int tax = 0;
        for(int i=0; i<tabOrder.getRowCount(); ++i)
            tax += Integer.parseInt(tabOrder.getValueAt(i, 2).toString());
        tfSubTotal.setValue(tax);
        tax *= 0.1;

        tfTax.setValue(tax);
        tfService.setValue(tax);

        // calculate total to pay amount reduced by discounts
        int init = (int) tfSubTotal.getValue() + (int) tfTax.getValue() + (int) tfService.getValue();
        for(int i=0; i<tabDiscounts.getRowCount(); ++i)
            init -= (init * Integer.parseInt(tabDiscounts.getValueAt(i, 1).toString()) / 100);
        tfTotalToPay.setValue(init);

        if(rbCredit.isSelected()) tfPaid.setText("" + init);
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    private void resetComponents() {
        // reset some components
        rbCash.setSelected(true);
        cbCreditCard.setEnabled(false);
        cbTableNo.setSelectedIndex(0);
        cbEvent.setSelectedIndex(0);
        refreshList();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cashier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cashier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cashier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cashier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cashier().setVisible(true);
//                try {
//                    MyDb.createReport(1, 84000, 100000);
//                } catch (Exception e) { }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSplitBills;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox cbCreditCard;
    private javax.swing.JComboBox cbEvent;
    private javax.swing.JComboBox cbTableNo;
    private javax.swing.JPanel discDetailGroup;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labChange;
    private javax.swing.JLabel labCreditCard;
    private javax.swing.JLabel labEvent;
    private javax.swing.JLabel labPaid;
    private javax.swing.JLabel labPayment;
    private javax.swing.JLabel labService;
    private javax.swing.JLabel labSubTotal;
    private javax.swing.JLabel labTOTAL;
    private javax.swing.JLabel labTableNo;
    private javax.swing.JLabel labTax;
    private javax.swing.JLabel labTotalToPay;
    private javax.swing.JMenu menuAction;
    private javax.swing.JMenuBar menuCashier;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.ButtonGroup paymentBtnGroup;
    private javax.swing.JRadioButton rbCash;
    private javax.swing.JRadioButton rbCredit;
    private javax.swing.JScrollPane spDiscounts;
    private javax.swing.JScrollPane spOrder;
    private javax.swing.JTable tabDiscounts;
    private javax.swing.JTable tabOrder;
    private javax.swing.JFormattedTextField tfChange;
    private javax.swing.JTextField tfPaid;
    private javax.swing.JFormattedTextField tfService;
    private javax.swing.JFormattedTextField tfSubTotal;
    private javax.swing.JFormattedTextField tfTax;
    private javax.swing.JFormattedTextField tfTotalToPay;
    // End of variables declaration//GEN-END:variables
}
