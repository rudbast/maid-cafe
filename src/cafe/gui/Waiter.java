/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cafe.gui;

import cafe.tool.MyDb;
import cafe.tool.MsgBox;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Rudy
 */
public class Waiter extends javax.swing.JFrame {
    /**
     * Creates new form Waiter
     */
    public Waiter(String staffId) {
        initComponents();
        labNo.setText(staffId);

        loadList();
        refreshList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        labTableNo = new javax.swing.JLabel();
        cbTableNo = new javax.swing.JComboBox();
        btnRefresh = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnJoin = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        labWaiterNo = new javax.swing.JLabel();
        labNo = new javax.swing.JLabel();
        labName = new javax.swing.JLabel();
        foodPanelGroup = new javax.swing.JPanel();
        spFood = new javax.swing.JScrollPane();
        tabFood = new javax.swing.JTable();
        beveragePanelGroup = new javax.swing.JPanel();
        spBeverage = new javax.swing.JScrollPane();
        tabBeverage = new javax.swing.JTable();
        spOrder = new javax.swing.JScrollPane();
        tabOrder = new javax.swing.JTable();
        menuWaiter = new javax.swing.JMenuBar();
        menuAction = new javax.swing.JMenu();
        miLogout = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Waiter");

        labTableNo.setText("Table No.");

        cbTableNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTableNoItemStateChanged(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(0, 204, 0));
        btnRefresh.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnNew.setBackground(new java.awt.Color(255, 255, 0));
        btnNew.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        btnNew.setText("New Table");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnJoin.setBackground(new java.awt.Color(255, 0, 255));
        btnJoin.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnJoin.setText("Table Join");
        btnJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(0, 204, 204));
        btnAdd.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(204, 0, 0));
        btnCancel.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setToolTipText("");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        labWaiterNo.setText("No.");

        labNo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labNo.setText("waiter no");

        labName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labName.setText("staffname");

        foodPanelGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Food"));
        foodPanelGroup.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        foodPanelGroup.setOpaque(false);

        tabFood.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabFood.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spFood.setViewportView(tabFood);

        javax.swing.GroupLayout foodPanelGroupLayout = new javax.swing.GroupLayout(foodPanelGroup);
        foodPanelGroup.setLayout(foodPanelGroupLayout);
        foodPanelGroupLayout.setHorizontalGroup(
            foodPanelGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, foodPanelGroupLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(spFood, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
        );
        foodPanelGroupLayout.setVerticalGroup(
            foodPanelGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spFood, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
        );

        beveragePanelGroup.setBorder(javax.swing.BorderFactory.createTitledBorder("Beverage"));
        beveragePanelGroup.setOpaque(false);

        tabBeverage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabBeverage.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spBeverage.setViewportView(tabBeverage);

        javax.swing.GroupLayout beveragePanelGroupLayout = new javax.swing.GroupLayout(beveragePanelGroup);
        beveragePanelGroup.setLayout(beveragePanelGroupLayout);
        beveragePanelGroupLayout.setHorizontalGroup(
            beveragePanelGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, beveragePanelGroupLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(spBeverage, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
        );
        beveragePanelGroupLayout.setVerticalGroup(
            beveragePanelGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spBeverage, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
        );

        tabOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        spOrder.setViewportView(tabOrder);

        menuAction.setText("Action");

        miLogout.setText("Logout");
        miLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLogoutActionPerformed(evt);
            }
        });
        menuAction.add(miLogout);

        menuWaiter.add(menuAction);

        setJMenuBar(menuWaiter);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(beveragePanelGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(foodPanelGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labWaiterNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labNo, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labName, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labTableNo, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbTableNo, 0, 67, Short.MAX_VALUE))
                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                            .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnJoin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labNo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labWaiterNo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(labName))
                                    .addComponent(btnRefresh))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(labTableNo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbTableNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnJoin)))
                            .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnCancel)
                            .addComponent(btnRemove))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(foodPanelGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beveragePanelGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(673, 542));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // cancel selected menu
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        String check = MyDb.GetField("SELECT `Status` FROM `Order_List` WHERE `Order_No`=" + tabOrder.getModel().getValueAt(tabOrder.getSelectedRow(), 0));
        if(check.equals("IN PROCESS")){
            MsgBox.info("Selected menu is already in process.");
            refreshList();
            return;
        }
        // get order no from tabOrder
        int id = Integer.parseInt(tabOrder.getModel().getValueAt(tabOrder.getSelectedRow(), 0).toString());
        MyDb.ExecNonQuery("DELETE FROM `Kitchen` WHERE `Order_No`=" + id);
        MyDb.ExecNonQuery("UPDATE `Order_List` SET `Status`='CANCELED' WHERE `Order_No`=" + id);
        refreshList();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cbTableNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTableNoItemStateChanged
        // update menu list according to selected table no.
        if(cbTableNo.getSelectedIndex() == 0)
            btnAdd.setEnabled(false);
        btnAdd.setEnabled(true);
        refreshList();
    }//GEN-LAST:event_cbTableNoItemStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // insert/update item from jtable where quantity > 0
        if(tabFood.isEditing()) tabFood.getCellEditor().stopCellEditing();
        if(tabBeverage.isEditing()) tabBeverage.getCellEditor().stopCellEditing();
        tabFood.clearSelection();
        tabBeverage.clearSelection();

        int fid, bid, val;
        fid = bid = val = 0;
        String tabNo;

        // cancel executing query if table food & beverage is empty
        boolean empty = true, added = false; // used for string processing logic
        String query = "INSERT INTO `Order_List` (`Initial_No`, `Table_No`,`Quantity`,`Menu_Id`,`Staff_Id`,`Status`) VALUES ";
        for(int i=0; i<tabFood.getRowCount(); ++i){
            try {
                // get food quantity from current row
                val = Integer.parseInt(tabFood.getValueAt(i, 1).toString());
            } catch (Exception e) {}
            if(val > 0){
                if(empty) empty = false;
                // get food id from current row
                fid = Integer.parseInt(tabFood.getModel().getValueAt(i, 0).toString());
                if(!added) added = true;
                else query += ", ";
                // insert food into Order_List from current row
                query += "('" + getInitTableNo() + "','" + cbTableNo.getSelectedItem().toString() + "'," + val + "," + fid + "," + labNo.getText() + ",'QUEUING')";
                val = 0;
//                query += "\n";
            }
        }
//        MsgBox.info(query);
//        return;

        val = 0;
        for(int i=0; i<tabBeverage.getRowCount(); ++i){
            try {
                // get beverage quantity from current row
                val = Integer.parseInt(tabBeverage.getValueAt(i, 1).toString());
            } catch (Exception e) {}
            if(val > 0){
                if(empty) empty = false;
                // get food id from current row
                fid = Integer.parseInt(tabBeverage.getModel().getValueAt(i, 0).toString());
                if(!added) added = true;
                else query += ", ";
                // insert beverage into Order_List from current row
                query += "('" + getInitTableNo() + "','" + cbTableNo.getSelectedItem().toString() + "'," + val + "," + fid + "," + labNo.getText() + ",'QUEUING')";
                val = 0;
//                query += "\n";
            }
        }
//        MsgBox.info(query);
//        return;
        if(!empty){
            this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
            MyDb.ExecNonQuery(query);
        }
        else return;

        // confirm all 'QUEUEING' order by inserting into Kitchen
        Connection conn = null;
        Statement stm = null;
        ResultSet rs = null;
        try {
            // connection/statement/resultset declaration
            conn = DriverManager.getConnection(MyDb.url);
            stm = conn.createStatement();
            rs = stm.executeQuery("SELECT `Order_No` FROM `Order_List` WHERE `Table_No`='" + cbTableNo.getSelectedItem().toString() + "' AND `Status`='QUEUING' AND `Order_No` NOT IN (SELECT `Order_No` FROM `Kitchen`)");
            // insertion query string
            query = "INSERT INTO `Kitchen` (`Order_No`) VALUES ";
            added = false;
            // read query result
            while(rs.next()){
                if(!added) added = true;
                else query += ", ";
                query += "(" + rs.getString(1) + ")";
            }
//            MsgBox.info(query);
//            return;
            MyDb.ExecNonQuery(query);
        }
        catch (SQLException e){ }
        finally {
            try {
                // close existing connection/statement/resultset
                rs.close();
                stm.close();
                conn.close();
            } catch (SQLException e){
                MsgBox.info(e.toString());
            }
        }
        resetQty();
        refreshList();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // remove selected menu
        int id = Integer.parseInt(tabOrder.getModel().getValueAt(tabOrder.getSelectedRow(), 0).toString());
        MyDb.ExecNonQuery("DELETE FROM `Order_List` WHERE `Order_No`=" + id);
        refreshList();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // refresh table data
        refreshList();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinActionPerformed
        // join to new table
        new TableJoin(cbTableNo.getModel(), this).setVisible(true);
    }//GEN-LAST:event_btnJoinActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // add new table
        String newtab = MsgBox.input("Input new table number :", "New Table");
        // ref : http://stackoverflow.com/a/11533531
        // check string input to allow only numbers
        if(newtab.matches("^[0-9]+$")){
//            MsgBox.info("VALID !!");
//            return;
            if(!tableExist(newtab)){
                cbTableNo.addItem(newtab);
                cbTableNo.setSelectedIndex(cbTableNo.getItemCount()-1);
            }
            else MsgBox.info("Table exists, please choose existing table or initiate other table.");
        }
        else {
//            MsgBox.info("IN-VALID !!");
//            return;
            MsgBox.info("Input containing any alphabet or space is disallowed");
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void miLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLogoutActionPerformed
        // close form and logout
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_miLogoutActionPerformed

    private boolean tableExist(String tabno) {
        // check if table exists already when input a certain table
        boolean check = false;
        Connection conn = null;
        Statement stm = null;
        ResultSet rs = null;

        try {
            // connection/statement/resultset declaration
            conn = DriverManager.getConnection(MyDb.url);
            stm = conn.createStatement();
            rs = stm.executeQuery("SELECT DISTINCT(`Table_No`) FROM `Order_List` WHERE `Table_No` LIKE '%" + tabno + "%'");

            while(rs.next()){
                // check string equality (available table no with current input)
                String tab = rs.getString(1);
                String[] parts = tab.split(" & ");
                for(int i=0; i<parts.length; ++i){
                    if(parts[i].equals(tabno)){
                        if(!check){
                             check = true;
                             break;
                        }
                    }
                }
                if(check) break;
            }
        }
        catch (SQLException e){
            MsgBox.info(e.toString());
        }
        finally {
            try {
                // close existing connection/statement/resultset
                rs.close();
                stm.close();
                conn.close();
            } catch (SQLException e){
                MsgBox.info(e.toString());
            }
        }
        return check;
    }

    private String getInitTableNo() {
        // set initial table no value
        String currTabNo = cbTableNo.getItemAt(cbTableNo.getSelectedIndex()).toString();
        // split string value
        String[] parts = currTabNo.split(" & ");
        return parts[0];
    }

    public void doneJoinTable(javax.swing.ComboBoxModel newcbmodel) {
        // set Waiter's table no model according to edited table no by TableJoin
        cbTableNo.setModel(newcbmodel);
    }

    private void refreshList() {
        // refresh table data
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));

        int idx = -1;
        if(tabOrder.getRowCount() > 0)
            idx = tabOrder.getSelectedRow();

        tabOrder = MyDb.setTable("SELECT o.order_no, m.name 'Menu Name', o.Quantity, o.Status " +
                "FROM `Order_List` o JOIN `Menu` m " +
                "ON o.menu_id=m.id " +
                "WHERE o.table_no='" + cbTableNo.getSelectedItem().toString() + "'" +
                " ORDER BY o.status, m.name ");
        tabOrder.removeColumn(tabOrder.getColumnModel().getColumn(0));
        spOrder.setViewportView(tabOrder);

        if(tabOrder.getRowCount() == 0){
            btnCancel.setEnabled(false);
            btnRemove.setEnabled(false);
        }

        // set selection change event for table tabOrder
        tabOrder.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent ev) {
                if (ev.getValueIsAdjusting())
                    return;
                // get status
                String stat = tabOrder.getValueAt(tabOrder.getSelectedRow(), 2).toString();
                // set buttons availability according to status
                if(stat.equals("DONE") || stat.equals("IN PROCESS")){
                    btnCancel.setEnabled(false);
                    btnRemove.setEnabled(false);
                }
                else if(stat.equals("CANCELED")){
                    btnCancel.setEnabled(false);
                    btnRemove.setEnabled(true);
                }
                else {
                    btnCancel.setEnabled(true);
                    btnRemove.setEnabled(false);
                }
            }
        });

        if(idx != -1)
            if(tabOrder.getRowCount() > idx)
                tabOrder.setRowSelectionInterval(idx, idx);
        if(tabOrder.getRowCount() > 0)
            tabOrder.setRowSelectionInterval(0, 0);
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    private void loadList() {
        // preset
        labName.setText(MyDb.GetField("SELECT `First_Name` FROM `Staff` WHERE `Id`=" + labNo.getText()));
        // populate tabFood and tabBeverage
        tabFood = MyDb.setTableV3("SELECT `Id`, `Name` FROM `Menu` WHERE `Category`='Food' ORDER BY `Name`", "Quantity");
        tabFood.removeColumn(tabFood.getColumnModel().getColumn(0));
        spFood.setViewportView(tabFood);

        tabBeverage = MyDb.setTableV3("SELECT `Id`, `Name` FROM `Menu` WHERE `Category`='Beverage' ORDER BY `Name`", "Quantity");
        tabBeverage.removeColumn(tabBeverage.getColumnModel().getColumn(0));
        spBeverage.setViewportView(tabBeverage);

        java.util.Vector tableListModel = MyDb.FillTableNumber("SELECT DISTINCT(`Table_No`) FROM `Order_List` WHERE `Staff_Id`=" + labNo.getText() + " ORDER BY `Table_No`");
        cbTableNo.setModel(new javax.swing.DefaultComboBoxModel(tableListModel));

        btnAdd.setEnabled(false);
        btnCancel.setEnabled(false);
        btnRemove.setEnabled(false);

        tabFood.setRowSelectionAllowed(false);
        tabBeverage.setRowSelectionAllowed(false);
    }

    private void resetQty() {
        // reset tabFood and tabBeverage menu quantity to null
        for(int i=0; i<tabFood.getRowCount(); ++i)
            tabFood.setValueAt(null, i, 1);
        for(int i=0; i<tabBeverage.getRowCount(); ++i)
            tabBeverage.setValueAt(null, i, 1);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Waiter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Waiter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Waiter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Waiter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Waiter("1").setVisible(true);
//                MyDb.ExecNonQuery("UPDATE `Order_List` SET `Table_No`='1 & 2' WHERE `Table_No` LIKE '%1%' OR `Table_No` LIKE '%2%';UPDATE `Order_List` SET `Table_No`='4 & 7' WHERE `Table_No` LIKE '%4%' OR `Table_No` LIKE '%7%';");
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel beveragePanelGroup;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnJoin;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox cbTableNo;
    private javax.swing.JPanel foodPanelGroup;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel labName;
    private javax.swing.JLabel labNo;
    private javax.swing.JLabel labTableNo;
    private javax.swing.JLabel labWaiterNo;
    private javax.swing.JMenu menuAction;
    private javax.swing.JMenuBar menuWaiter;
    private javax.swing.JMenuItem miLogout;
    private javax.swing.JScrollPane spBeverage;
    private javax.swing.JScrollPane spFood;
    private javax.swing.JScrollPane spOrder;
    private javax.swing.JTable tabBeverage;
    private javax.swing.JTable tabFood;
    private javax.swing.JTable tabOrder;
    // End of variables declaration//GEN-END:variables
}
