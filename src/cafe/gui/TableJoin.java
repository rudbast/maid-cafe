/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cafe.gui;

import cafe.tool.MsgBox;
import cafe.tool.MyDb;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Rudy
 */
public class TableJoin extends javax.swing.JFrame {

    /**
     * Creates new form TableJoin
     */
    public TableJoin(javax.swing.ComboBoxModel cbmodel, Waiter parent) {
        initComponents();
        cbTarget.setModel(cloneModel(cbmodel));
        this.parent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbTarget = new javax.swing.JComboBox();
        cbSource = new javax.swing.JComboBox();
        labTarget = new javax.swing.JLabel();
        labSource = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cbTarget.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTargetItemStateChanged(evt);
            }
        });

        labTarget.setText("Target");

        labSource.setText("Source");

        btnAdd.setBackground(new java.awt.Color(0, 204, 204));
        btnAdd.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDone.setBackground(new java.awt.Color(0, 204, 0));
        btnDone.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labTarget)
                    .addComponent(labSource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSource, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labTarget))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labSource))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnDone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private Waiter parent;

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // add source table to target
        if(cbTarget.getSelectedIndex() == 0) return;
        if(cbSource.getSelectedIndex() == 0) return;
        String target = cbTarget.getSelectedItem().toString();
        String source = cbSource.getSelectedItem().toString();

        cbTarget.setModel(convertVectModel(cbTarget.getModel(), cbSource.getModel(), cbTarget.getSelectedIndex(), cbSource.getSelectedIndex()));
        cbSource.setModel(cloneModel(cbTarget.getModel()));
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        // confirm table join changes and update database
        if(!MsgBox.ask("Confirm table changes ?\n(Changes cannot be undone once confirmed)"))
            return;

        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        // update table database
        String query = "";
        for(int i=1; i<cbTarget.getItemCount(); ++i){
            // get target combobox string value
            String currRow = cbTarget.getItemAt(i).toString();
            // split string value
            String[] parts = currRow.split(" & ");
            // check parts splitted and update those table to new value
            if(parts.length > 1){
                // query string logic
                query = "UPDATE `Order_List` SET `Table_No`='" + currRow + "' WHERE ";
                for(int j=0; j<parts.length; ++j){
                    query += "`Initial_No`='" + parts[j] + "'";
                    if(j < parts.length - 1) query += " OR ";
                }
//                System.out.println(query);
//                return;
                MyDb.ExecNonQuery(query);
                cleanOrderList(currRow);
            }
        }
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
        // call Waiter form method to set combobox view
        parent.doneJoinTable(cbTarget.getModel());
        // close form
        this.dispose();
    }//GEN-LAST:event_btnDoneActionPerformed

//    private boolean tableExist(String tabno) {
//        boolean check = false;
//        Connection conn = null;
//        Statement stm = null;
//        ResultSet rs = null;
//
//        try {
//            // connection/statement/resultset declaration
//            conn = DriverManager.getConnection(MyDb.url);
//            stm = conn.createStatement();
//            rs = stm.executeQuery("SELECT DISTINCT(`Table_No`) FROM `Order_List` WHERE `Table_No` LIKE '%" + tabno + "%'");
//
//            while(rs.next()){
//               String tab = rs.getString(1);
//               String[] parts = tab.split(" & ");
//               for(int i=0; i<parts.length; ++i){
//                   if(parts[i].equals(tabno)){
//                       if(!check){
//                            check = true;
//                            break;
//                       }
//                   }
//               }
//               if(check) break;
//            }
//        }
//        catch (SQLException e){
//            MsgBox.info(e.toString());
//        }
//        finally {
//            try {
//                // close existing connection/statement/resultset
//                rs.close();
//                stm.close();
//                conn.close();
//            } catch (SQLException e){
//                MsgBox.info(e.toString());
//            }
//        }
//        return check;
//    }

    private void cbTargetItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTargetItemStateChanged
        // target combobox event behaviour
        if(cbTarget.getSelectedIndex() == 0) return;
        // set source combobox values equal to target, except for selected index
        cbSource.setModel(convertVectModel(cbTarget.getModel(), cbTarget.getSelectedIndex()));
    }//GEN-LAST:event_cbTargetItemStateChanged

    private javax.swing.ComboBoxModel convertVectModel(javax.swing.ComboBoxModel target, javax.swing.ComboBoxModel source, int targetIndex, int sourceIndex) {
        // return a new combobox model with a new joined list from source to target
        java.util.Vector<String> vect = new java.util.Vector<String>();
        javax.swing.JComboBox newcb;

        for(int i=0; i<target.getSize(); ++i){
            // check if current position is on target index
            if(i == targetIndex)
                // add combined value to vector
                vect.add(target.getElementAt(i).toString() + " & " + source.getElementAt(sourceIndex).toString());
            // check if current position value (target) equals to source's value
            else if(!target.getElementAt(i).equals(source.getElementAt(sourceIndex)))
                // add value to vector if it's not equal
                vect.add(target.getElementAt(i).toString());
        }
        newcb = new javax.swing.JComboBox(vect);
        return newcb.getModel();
    }

    private javax.swing.ComboBoxModel convertVectModel(javax.swing.ComboBoxModel model, int index) {
        // return a new combobox model without the specified index
        java.util.Vector<String> vect = new java.util.Vector<String>();
        javax.swing.JComboBox newcb;

        for(int i=0; i<model.getSize(); ++i){
            // check if current position is on specified index
            if(i!=index){
                // add value to vector if it's not
                vect.add(model.getElementAt(i).toString());
            }
        }
        newcb = new javax.swing.JComboBox(vect);
        return newcb.getModel();
    }

    private javax.swing.ComboBoxModel cloneModel(javax.swing.ComboBoxModel model) {
        // return a new combobox model exactly the same with specified(clone)
        java.util.Vector<String> vect = new java.util.Vector<String>();
        javax.swing.JComboBox newcb;

        for(int i=0; i<model.getSize(); ++i){
            // add all values to vector
            vect.add(model.getElementAt(i).toString());
        }
        newcb = new javax.swing.JComboBox(vect);
        return newcb.getModel();
    }

    private void cleanOrderList(String tableno) {
        // clean any duplicate order (menu) limited to status 'DONE'
        // set table from database
        javax.swing.JTable tabTemp = MyDb.setTable("SELECT `Order_No`, `Quantity`, `Menu_Id` FROM `Order_List` WHERE `Table_No`='" + tableno + "' AND `Status`='DONE' ORDER BY `Menu_Id`");
        // check each row's menu similarity
        for(int i=0; i<tabTemp.getRowCount(); ++i){
            // get menu id of current row
            String currId = tabTemp.getValueAt(i, 2).toString();
            // get order id of current row
            String currOid = tabTemp.getValueAt(i, 0).toString();
            // get quantity of current row
            int currQty = Integer.parseInt(tabTemp.getValueAt(i, 1).toString());
            boolean equalityfound = false;
            // check every row below current row for similarity
            for(int j=i+1; j<tabTemp.getRowCount(); ++j){
                // get menu id of next row
                String newId = tabTemp.getValueAt(j, 2).toString();
                // get order id of next row
                String newOid = tabTemp.getValueAt(j, 0).toString();
                // check similarity of menu id
                if(currId.equals(newId)){
                    // set flag to true if duplicate exist
                    if(!equalityfound) equalityfound = true;
                    // add current row menu quantity with the new quantity
                    currQty += Integer.parseInt(tabTemp.getValueAt(j, 1).toString());
                    // delete the new row from database (clean duplicate)
                    MyDb.ExecNonQuery("DELETE FROM `Order_List` WHERE `Order_No`=" + newOid);
                    if(j == tabTemp.getRowCount()-1) i = j-1;
                }
                else {
                    i = j-1;
                    break;
                }
            }
            // update current row quantity according to flag
            if(equalityfound) MyDb.ExecNonQuery("UPDATE `Order_List` SET `Quantity`=" + currQty + " WHERE `Order_No`=" + currOid);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableJoin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableJoin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableJoin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableJoin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new TableJoin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDone;
    private javax.swing.JComboBox cbSource;
    private javax.swing.JComboBox cbTarget;
    private javax.swing.JLabel labSource;
    private javax.swing.JLabel labTarget;
    // End of variables declaration//GEN-END:variables
}
